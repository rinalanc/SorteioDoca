import streamlit as st
import pandas as pd
from openpyxl import load_workbook, Workbook # Ainda necess√°rio para manipular Excel
import io # Para gerar o Excel em mem√≥ria
# Importe suas fun√ß√µes de aloca√ß√£o de outro arquivo se preferir:
# from your_logic_module import allocate_dinner_shifts, draw_activated_functions, EXCLUSIONS, INCREASED_PROBABILITY, CORE_ASSOCIATES_FOR_DINNER, CONCEPTUAL_POSITION_GROUPS

# Ou inclua todas as suas fun√ß√µes e constantes no mesmo app.py
# (coloque aqui todo o c√≥digo das suas fun√ß√µes e constantes como CORE_POSITIONS, EXCLUSIONS, etc.)
# ... (COLE SEU C√ìDIGO AQUI) ...

# T√≠tulo da Aplica√ß√£o
st.title("üìä Alocador Autom√°tico de Escalas e Sorteios")
st.markdown("Bem-vindo ao seu assistente de aloca√ß√£o de equipes!")

# --- Carregar associados.txt ---
st.header("1. Carregar Associados")
uploaded_associates_file = st.file_uploader("Arraste ou clique para carregar o arquivo 'associados.txt'", type="txt", key="associates_uploader")
associates = []
if uploaded_associates_file is not None:
    # Decodificar o arquivo e remover linhas vazias/espa√ßos
    raw_associates = [line.strip() for line in uploaded_associates_file.getvalue().decode("utf-8").splitlines() if line.strip()]
    
    # Remover duplicatas mantendo a ordem original, se houver
    seen = set()
    associates = [x for x in raw_associates if not (x in seen or seen.add(x))]
    
    if associates:
        st.success(f"Arquivo 'associados.txt' carregado com sucesso! ({len(associates)} associados)")
        st.write("Associados carregados:", associates)
    else:
        st.warning("O arquivo 'associados.txt' est√° vazio ou n√£o cont√©m nomes v√°lidos.")
else:
    st.info("Por favor, carregue o arquivo 'associados.txt' para iniciar.")
    # Opcional: Se quiser usar uma lista padr√£o para teste sem upload
    # associates = ["horaroge", "leonarsd", ...] # Comente isso em produ√ß√£o se exigir upload


# --- Carregar modelo_escala.xlsx (Opcional, se o modelo n√£o for fixo) ---
# Se o modelo_escala.xlsx for um template fixo e voc√™ o incluir no reposit√≥rio GitHub,
# voc√™ pode carreg√°-lo diretamente do disco do servidor Streamlit.
# Mas se o usu√°rio precisar fornecer o modelo, use:
st.header("2. Carregar Modelo de Escala (Opcional, se o seu n√£o for fixo no GitHub)")
uploaded_excel_model_file = st.file_uploader("Arraste ou clique para carregar o arquivo 'modelo_escala.xlsx'", type="xlsx", key="model_uploader")
if uploaded_excel_model_file is not None:
    # Voc√™ precisar√° salvar isso temporariamente ou usar BytesIO para carregar no openpyxl
    # Para simplificar, neste exemplo, vamos assumir que o modelo_escala.xlsx estar√° no reposit√≥rio.
    st.success("Modelo de Escala carregado. (Este exemplo assume que 'modelo_escala.xlsx' est√° no reposit√≥rio.)")
    # A L√≥gica real de carregar o modelo a partir do upload ficaria aqui
    # Ex: workbook_model = load_workbook(uploaded_excel_model_file)
else:
    st.info("Se voc√™ n√£o tem o 'modelo_escala.xlsx' no reposit√≥rio, carregue-o aqui.")

# --- Execu√ß√£o da L√≥gica ---
if associates: # S√≥ mostra os bot√µes se houver associados carregados
    st.header("3. Executar Aloca√ß√£o e Sorteio")

    # Bot√£o para Alocar Escalas da Ceia
    if st.button("üöÄ Iniciar Aloca√ß√£o de Ceia"):
        with st.spinner("Alocando posi√ß√µes de ceia..."):
            # A fun√ß√£o write_to_excel precisa ser adaptada para n√£o salvar no disco, mas gerar em mem√≥ria
            # Vamos gerar o Excel final no final do processo
            
            # Use as suas fun√ß√µes de aloca√ß√£o aqui
            allocated_schedule, unallocated_from_ceia_for_draw = allocate_dinner_shifts(
                list(associates), EXCLUSIONS, INCREASED_PROBABILITY, CORE_ASSOCIATES_FOR_DINNER
            )
            st.session_state['allocated_schedule'] = allocated_schedule
            st.session_state['unallocated_for_draw'] = unallocated_from_ceia_for_draw
            st.session_state['initial_associates_set'] = set(associates)

            st.subheader("‚úÖ Escala da Ceia Gerada:")
            # Exibir a escala da ceia de forma organizada
            ceia_data = []
            for full_pos_str, assoc in sorted(allocated_schedule.items()):
                ceia_data.append({"Posi√ß√£o": full_pos_str, "Associado": assoc})
            st.dataframe(pd.DataFrame(ceia_data))
            
            if unallocated_from_ceia_for_draw:
                st.info(f"**{len(unallocated_from_ceia_for_draw)}** associados eleg√≠veis para sorteio de fun√ß√µes extras.")
            else:
                st.info("Todos os associados foram alocados na ceia (ou n√£o h√° mais eleg√≠veis para sorteio).")
            
            st.success("Aloca√ß√£o de Ceia Conclu√≠da! Prossiga para o sorteio, se desejar.")

    # Se√ß√£o para sorteio (s√≥ aparece ap√≥s a aloca√ß√£o da ceia)
    if 'allocated_schedule' in st.session_state and st.session_state['allocated_schedule'] and 'unallocated_for_draw' in st.session_state:
        st.subheader("4. Sorteio de Fun√ß√µes Extras")
        activate_extras_option = st.radio(
            "Deseja ativar as fun√ß√µes extras?",
            ("Sim", "N√£o"), index=1, key="activate_extras_radio"
        )
        
        num_draws = 0
        if activate_extras_option == "Sim":
            num_draws = st.number_input(
                f"N√∫mero de posi√ß√µes para sortear (m√°x: {len(st.session_state['unallocated_for_draw'])} associados dispon√≠veis):",
                min_value=0, max_value=len(st.session_state['unallocated_for_draw']), value=min(len(ACTIVATED_FUNCTIONS), len(st.session_state['unallocated_for_draw'])), key="num_draws_input"
            )

        if st.button("üé≤ Executar Sorteio de Fun√ß√µes Extras", key="draw_button"):
            if activate_extras_option == "Sim" and num_draws > 0:
                with st.spinner("Executando sorteio de fun√ß√µes..."):
                    # Temporariamente modificar a fun√ß√£o draw_activated_functions para n√£o pedir input
                    # ou passar os par√¢metros diretamente
                    
                    # Adapte draw_activated_functions para n√£o ter input()
                    # A l√≥gica aqui precisaria ser cuidadosamente ajustada
                    # No seu c√≥digo original, draw_activated_functions j√° recebe o n√∫mero de sorteios se for alterada.
                    
                    # Supondo uma vers√£o adaptada de draw_activated_functions que n√£o pede input
                    # Ou voc√™ passa activate_extras e num_draws para ela se ela aceitar
                    drawn_assignments = draw_activated_functions_web_version(
                        list(st.session_state['unallocated_for_draw']), EXCLUSIONS, INCREASED_PROBABILITY, num_draws
                    )
                    st.session_state['drawn_assignments'] = drawn_assignments

                    st.subheader("‚úÖ Atribui√ß√µes do Sorteio Finalizadas:")
                    drawn_data = []
                    for pos, assoc in sorted(drawn_assignments.items()):
                        drawn_data.append({"Posi√ß√£o Sorteada": pos, "Associado": assoc})
                    st.dataframe(pd.DataFrame(drawn_data))
                    st.success("Sorteio Conclu√≠do!")
            elif activate_extras_option == "N√£o":
                st.info("Sorteio de fun√ß√µes extras desativado.")
            else:
                st.warning("N√∫mero de sorteios deve ser maior que zero se ativado.")

    # --- Gerar Excel Final ---
    if 'allocated_schedule' in st.session_state: # Verifica se a ceia foi alocada
        st.header("5. Baixar Escala Final")
        
        # Obter todos os associados alocados/sorteados
        final_allocated_associates_set = set()
        for assoc in st.session_state['allocated_schedule'].values():
            if not assoc.startswith('('):
                final_allocated_associates_set.add(assoc)
        if 'drawn_assignments' in st.session_state:
            for assoc in st.session_state['drawn_assignments'].values():
                if not assoc.startswith('('):
                    final_allocated_associates_set.add(assoc)
        
        all_unallocated_associates_overall = list(st.session_state['initial_associates_set'] - final_allocated_associates_set)

        if st.button("üíæ Gerar e Baixar Escala Completa em Excel"):
            with st.spinner("Gerando arquivo Excel..."):
                # A fun√ß√£o `write_to_excel` precisa ser adaptada para n√£o usar um nome de arquivo fixo
                # e para retornar os bytes do workbook em mem√≥ria.
                
                # Adapte sua fun√ß√£o write_to_excel:
                # 1. Remova o argumento `output_filename` e a chamada `workbook.save(output_filename)`.
                # 2. Em vez de salvar, use `buffer = io.BytesIO()` e `workbook.save(buffer)`
                # 3. Retorne `buffer.getvalue()`
                
                # Exemplo (voc√™ precisa adaptar a sua fun√ß√£o original):
                excel_buffer = io.BytesIO()
                # Carregar o modelo do GitHub
                try:
                    # Carrega o modelo de escala do reposit√≥rio GitHub
                    # O Streamlit monta seu reposit√≥rio como um sistema de arquivos.
                    workbook = load_workbook("modelo_escala.xlsx")
                except FileNotFoundError:
                    st.error("Erro: 'modelo_escala.xlsx' n√£o encontrado no reposit√≥rio. Por favor, adicione-o ao seu GitHub.")
                    st.stop()

                sheet = workbook.active
                sheet.title = "Escala de Aloca√ß√£o"

                # Restante da sua l√≥gica de escrita no Excel, como no write_to_excel original
                # ... (COLE A L√ìGICA DE ESCRITA NO EXCEL AQUI) ...

                # Salvar o workbook no buffer e obter os bytes
                workbook.save(excel_buffer)
                excel_bytes = excel_buffer.getvalue()

                st.download_button(
                    label="Clique para Baixar 'escala_da_equipe.xlsx'",
                    data=excel_bytes,
                    file_name="escala_da_equipe.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                st.success("Arquivo Excel gerado com sucesso!")
        
        if all_unallocated_associates_overall:
            st.subheader("Associados N√£o Alocados/Sorteados (Final):")
            for assoc in all_unallocated_associates_overall:
                st.write(f"- {assoc}")
        else:
            st.info("üéâ Todos os associados foram alocados/sorteados para alguma posi√ß√£o!")


# --- Rodap√© ---
st.markdown("---")
st.markdown("Esta aplica√ß√£o foi desenvolvida por **Rinalanc/Github**.")
st.markdown("Data: 30/06/2025")